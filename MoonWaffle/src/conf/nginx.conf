user  www-data;
worker_processes  4;
daemon off;
error_log  logs/error.log error;

events {
    worker_connections  1024;
    use epoll;
}


http {

    #include lua resty waf
    lua_package_path '/opt/openresty/lualib/lua_resty_waf/?.lua;;';
    lua_package_cpath '/opt/openresty/lualib/lua_resty_waf/?.lua;;';


    init_by_lua '
            -- use resty.core for performance improvement, see the status note above
            require "resty.core"

            -- require the base module
            local lua_resty_waf = require "waf"
	    logger = require "lib.log"

            -- define options that will be inherited across all scopes
            lua_resty_waf.default_option("debug", true)
            lua_resty_waf.default_option("mode", "ACTIVE")

            -- perform some preloading and optimization
            lua_resty_waf.init()
    ';


    include       mime.types;
    default_type  application/octet-stream;

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    gzip  on;

   server {
       listen 80;
       server_name _;


       pagespeed PGSPEED_ENABLED;

       # Needs to exist and be writable by nginx.  Use tmpfs for best performance.
       pagespeed FileCachePath /var/ngx_pagespeed_cache;
       #pagespeed settings
       pagespeed LowercaseHtmlNames on;
       pagespeed ModifyCachingHeaders on;
       pagespeed XHeaderValue "Powered By ngx_pagespeed";

       # enable CoreFilters
       pagespeed RewriteLevel CoreFilters;

       # disable particular filter(s) in CoreFilters
       #pagespeed DisableFilters rewrite_images;
       pagespeed EnableFilters combine_css,combine_javascript;
       pagespeed EnableFilters collapse_whitespace;
       pagespeed EnableFilters lazyload_images;
       pagespeed EnableFilters insert_dns_prefetch;

       # Enable purge cache
       pagespeed EnableCachePurge on;
       pagespeed PurgeMethod PURGE;

       pagespeed StatisticsPath /ngx_pagespeed_statistics;
       pagespeed MessagesPath /ngx_pagespeed_message;
       pagespeed ConsolePath /pagespeed_console;
       pagespeed AdminPath /pagespeed_admin;
       # Ensure requests for pagespeed optimized resources go to the pagespeed handler
       # and no extraneous headers get set.
       location ~ "\.pagespeed\.([a-z]\.)?[a-z]{2}\.[^.]{10}\.[^.]+" {
            add_header "" "";
       }
       location /ngx_pagespeed_statistics { allow 127.0.0.1; deny all; }
       location /ngx_pagespeed_message { allow 127.0.0.1; deny all; }
       location /pagespeed_console { allow 127.0.0.1; deny all; }
       location ~ ^/pagespeed_admin { allow 127.0.0.1; deny all; }



       location / {

       access_by_lua '
                local lua_resty_waf = require "waf"
                local waf = lua_resty_waf:new()
                -- default options can be overridden
                -- Logging
                waf:set_option("event_log_verbosity", 2)
                waf:set_option("score_threshold", 10)
                waf:set_option("event_log_target", "file")
                waf:set_option("event_log_target_path", "/opt/openresty/nginx/logs/waf.log")
                -- periodically flush the send buffer
                waf:set_option("event_log_periodic_flush", 20)
                waf:set_option("event_log_ngx_vars", "host")
                -- waf:set_option("event_log_request_arguments", true)
                -- waf:set_option("event_log_request_body", true)
                -- waf:set_option("event_log_request_headers", true)

                -- run the firewall
                waf:exec()
            ';

            header_filter_by_lua '
                local lua_resty_waf = require "waf"
                -- note that options set in previous handlers (in the same scope)
                -- do not need to be set again
                local waf = lua_resty_waf:new()
                waf:exec()
            ';

            body_filter_by_lua '
                local lua_resty_waf = require "waf"
                local waf = lua_resty_waf:new()
                waf:exec()
            ';

            log_by_lua '
                local lua_resty_waf = require "waf"
                local waf = lua_resty_waf:new()
                -- write out any event log entries to the
                -- configured target, if applicable
                waf:write_log_events()
            ';

       proxy_pass http://REV_BACKEND_IP:REV_BACKEND_PORT;
       proxy_read_timeout          1800s;
       proxy_set_header            Host $http_host;
       proxy_set_header            X-Real-IP $remote_addr;
       proxy_set_header            X-Forwarded-Host $host;
       proxy_set_header            X-Forwarded-Server $host;
       proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;
       proxy_buffer_size           128k;
       proxy_buffers               4 256k;
       proxy_busy_buffers_size     256k;
       proxy_set_header Host $host;
       proxy_set_header X-Real-IP $remote_addr;
       proxy_pass_request_headers      on;
   }
}
}
